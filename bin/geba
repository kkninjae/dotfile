#!/usr/bin/env bash

helper() {
  echo
  echo "DESCRIPTION"
  echo "  geba, a simple utility for managing secrets."
  echo
  echo "USAGE"
  echo "  Secrets are in a plain text file which is geba's db and resides in a directory on user machine."
  echo "  Before using geba, user needs to export the file in PATH_GEBA variable."
  echo "  When geba adds any secret, the secret will be appended as last entry in the file."
  echo "  User also needs to export encode/decode method in ENCODE_GEBA/DECODE_GEBA variables."
  echo "  geba will use those two methods to encode/decode user's secrets so that the file only has salted secret."
  echo "  When geba is called in terminal, geba outputs ids associated with the secret through fzf so user can select."
  echo "  After user selected an id, geba will decode the salted secret and copy it to clipboard."
  echo "  Each entry in PATH_GEBA will be in one of the following formats."
  echo
  echo "    0:[id]:[secret]     # first field is zero, means secret is not salted and will be saled after read."
  echo "    1:[id]:[secret]     # first field is one, means secret is salted."
  echo "    2:[id]:[secret]     # first field is two, means secret is not salted and will not be salted either."
  echo
  echo "OPTIONS"
  echo "  --add"
  echo "    pop out a vim window to let user add an entry."
  echo
  echo "  --add-batch [filename]"
  echo "    add all entries in the file."
  echo
  echo "  --delete"
  echo "    pop out an id list to let user delete the entry with selected id."
  echo
  echo "  --delete [id]"
  echo "    delete the entry with given id."
  echo
  echo "  --edit"
  echo "    pop out an id list to let user edit the entry with selected id."
  echo
  echo "  --edit [id]"
  echo "    edit the entry with given id."
  echo
}

ensalt() {
  bash -c "echo \"$1\" | $ENCODE_GEBA"
}

desalt() {
  bash -c "echo \"$1\" | $DECODE_GEBA"
}

getid() {
  local secretid="$1"
  [[ -z "$secretid" ]] && secretid=$(sed -E -e 's/^[0-2]:([^:]+):.+/\1/' "$PATH_GEBA" | fzf)
  [[ -z "$secretid" ]] && {
    echo "ERROR: empty id."
    exit 1
  }
  ! grep -q -E -e "^[0-2]:${secretid}:.+" "$PATH_GEBA" && {
    echo "ERROR: id ${secretid} not found."
    exit 1
  }
  echo "${secretid}" > "$TMPFILE"
}

processtmpfile() {
  sed -i '' -e '/^[[:space:]]*$/d' "$TMPFILE"
  [[ ! -s "$TMPFILE" ]] && {
    echo "ERROR: no content found."
    exit 1
  }

  sed -i '' -e '/^[0-2]:/! s/^/0:/' "$TMPFILE"
  grep -q -E -v -e '^[0-2]:[^:]+:[^:]+' "$TMPFILE" && {
    for line in $(sed -n -E -e '/^[0-2]:[^:]+:[^:]+/! =' "$TMPFILE"); do
      echo "ERROR: invalid entry detected at line ${line}."
    done
    exit 1
  }

  while IFS= read -r line; do
    local flag=$(echo "$line" | cut -d ':' -f 1)
    local secretid=$(echo "$line" | cut -d ':' -f 2)
    local secret=$(echo "$line" | cut -d ':' -f 3)
    if [[ "$1" = '--reverse' ]]; then
      [[ "$flag" = '1' ]] && {
        local field=$(desalt "$secret")
        sed -i '' -e "s/1:${secretid}:${secret}/0:${secretid}:${field}/" "$TMPFILE"
      }
    else
      [[ "$flag" = '0' ]] && {
        local field=$(ensalt "$secret")
        sed -i '' -e "s/0:${secretid}:${secret}/1:${secretid}:${field}/" "$TMPFILE"
      }
    fi
  done < "$TMPFILE"
}

edittmpfile() {
  [[ -s "$TMPFILE" ]] && {
    local flag=$(head -n 1 "$TMPFILE" | cut -d ':' -f 1)
    [[ "$flag" = '1' ]] && {
      local saltedsecret=$(head -n 1 "$TMPFILE" | cut -d ':' -f 3)
      local secret=$(desalt "$saltedsecret")
      sed -i '' -E -e "s/1:([^:]+):${saltedsecret}/0:\1:${secret}/" "$TMPFILE"
    }
  }
  vi "$TMPFILE"
}

get() {
  [[ ! -s "$PATH_GEBA" ]] && {
    echo "ABORT: no secret found."
    echo "Use: geba --add to add a secret."
    exit 1
  }

  getid
  local secretid=$(head -n 1 "$TMPFILE")
  local entry=$(sed -n -E -e "/^[0-2]:${secretid}:.+/p" "$PATH_GEBA")
  echo "$entry" > "$TMPFILE"

  processtmpfile --reverse
  local secret=$(head -n 1 "$TMPFILE" | cut -d ':' -f 3)
  cat /dev/null | pbcopy
  echo -n "$secret" | pbcopy
}

add() {
  edittmpfile
  processtmpfile

  local secretid=$(head -n 1 "$TMPFILE" | cut -d ':' -f 2)
  if grep -q -E -e "^[0-2]:${secretid}:.+" "$PATH_GEBA"; then
    echo "ERROR: duplicate id ${secretid}."
    echo "Use: geba --edit \"${secretid}\" to edit the secret."
    exit 1
  fi

  head -n 1 "$TMPFILE" >> "$PATH_GEBA"
  echo "ADDED: ${secretid}."
}

addbatch() {
  [[ ! -s "$1" ]] && {
    echo "ERROR: file ${1} not found."
    exit 1
  }
  cat "$1" > "$TMPFILE"
  processtmpfile

  while IFS= read -r line; do
    local secretid=$(echo "$line" | cut -d ':' -f 2)
    if grep -q -E -e "^[0-2]:${secretid}:.+" "$PATH_GEBA"; then
      echo "SKIP: duplicate id ${secretid}"
    else
      echo "$line" >> "$PATH_GEBA"
      echo "ADDED: ${secretid}."
    fi
  done < "$TMPFILE"
}

delete() {
  getid "$1"
  local secretid=$(head -n 1 "$TMPFILE")
  sed -i '' -E -e "/^[0-2]:${secretid}:.+/d" "$PATH_GEBA"
  echo "DELETED: ${secretid}."
}

edit() {
  getid "$1"
  local secretid=$(head -n 1 "$TMPFILE")
  local entry=$(sed -n -E -e "/^[0-2]:${secretid}:.+/p" "$PATH_GEBA")
  echo "$entry" > "$TMPFILE"

  edittmpfile
  processtmpfile

  local nsecretid=$(head -n 1 "$TMPFILE" | cut -d ':' -f 2)
  [[ "$secretid" != "$nsecretid" ]] && {
    echo "ERROR: id change not allowed, ${secretid} => ${nsecretid}."
    echo "Use: geba --add to add a secret."
    exit 1
  }

  local nentry=$(head -n 1 "$TMPFILE")
  [[ "$entry" != "$nentry" ]] && {
    sed -i '' -e "s/${entry}/${nentry}/" "$PATH_GEBA"
    echo "EDITED: ${secretid}"
  }
}

main() {
  [[ "$1" = '--help' ]] && {
    helper
    exit 0
  }

  [[ ! -f "$PATH_GEBA" ]] && {
    echo "ERROR: variable PATH_GEBA should be pointed to a text file."
    exit 1
  }

  ( [[ -z "$ENCODE_GEBA" ]] || [[ -z "$DECODE_GEBA" ]] ) && {
    echo "ERROR: variable ENCODE_GEBA/DECODE_GEBA are not properly set."
    exit 1
  }

  [[ -z "$1" ]] && {
    get
    exit 0
  }

  case $1 in
    --add ) add;;
    --add-batch ) shift; addbatch "$1";;
    --delete ) shift; delete "$1";;
    --edit ) shift; edit "$1";;
    * ) helper; exit 1;;
  esac
}

[[ ! -d ~/.geba ]] && mkdir ~/.geba
TMPFILE=~/.geba/tmp
touch "$TMPFILE"
cat /dev/null > "$TMPFILE"
trap "rm -rf ${TMPFILE}" 0
trap "rm -rf ${TMPFILE}" 1

main $*
